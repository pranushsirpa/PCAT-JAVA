1.: Pseudocode and Flowchart for Sorting Algorithm - Write pseudocode and create a flowchart for a bubble sort algorithm. 
Provide a brief explanation of how the algorithm works and a simple array of integers to demonstrate a dry run of your algorithm.

Solution:Bubble Sorting
Pseudocode:

Start
bubbleSort(A:list of sortable items)
n=length(A)
for i from 0 to n-1
for j from 0 to n-1-i 
if A[j] > A[j+1] then
swap A[j] and A[j+1]
End loop
End

FLOWCHART:

Start
|
V
Set n = length(A)
|
V
for i from 0 to n-1 do
|
V
for j from 0 to n-1-i do
|
V
if A[j] > A[j+1] then
|
V
Swap A[j] and A[j+1]
|
V
End

DRY RUN ON BUBBLE SORT
For Example : 5,3,8,1,2

Pass=1
3,5,1,2,8
3,1,5,2,8
3,1,2,5,8
3,1,2,5,8(no swap)
pass=2
3,1,2,5,8
1,3,2,5,8
1,2,3,5,8(no swap)
pass=3
1,2,3,5,8(no swap)
Therefore sorted array is done.

Explanation:

1.Bubble Sort repeatedly steps through the list,compares adjacent elements,and swaps them if they are in the wrong order.
2.The pass through the list is repeated until the list is sorted.
3.At each pass, the largest unsorted element bubbles up to its correct position.
4.Time complexity of Bubble sort is O(n2).

------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------

2.Recursive Function and Efficiency Analysis - Write a recursive function pseudocode and calculate the nth Fibonacci number and 
use Big O notation to analyze its efficiency. Compare this with an iterative approach and discuss the pros and cons in terms of space 
and time complexity.

Solution:
Fibonacci Number Pseudocode:
Recursive approach:

Start
function fibonacci(n):
    if n <= 1 then
        return n
    else
        return fibonacci(n-1) + fibonacci(n-2)
    end loop
end

Iterative approach:
Start
function fibonacci_iterative(n):
    if n <= 1 then
        return n
    else
        fib = [0, 1]
        for i from 2 to n do
            fib[i] = fib[i-1] + fib[i-2]
        end for
        return fib[n]
    end loop
end

The time complexity of the iterative Fibonacci algorithm is linear, O(n), as it only requires a single pass through the loop to 
calculate the nth Fibonacci number.

Recursive Approach:
Pros:
1.Simplicity of implementation.
Cons:
1.Exponential time complexity, making it inefficient for large values of n.
2.High space complexity due to the recursive calls, leading to potential stack overflow errors.

Iterative Approach:
Pros:
1.Linear time complexity, making it efficient even for large values of n.
2.Lower space complexity compared to the recursive approach.
Cons:
1.Slightly more complex implementation compared to the recursive approach.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------
                                        ******END********




